// Code generated by opanapi-generator. DO NOT EDIT.

package v1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// Generated from CertificateRequest.cert-manager.io/v1 CRD

// +kubebuilder:object:root=true

// CertificateRequestList is a list of CertificateRequests. 
type CertificateRequestList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items []CertificateRequest `json:"items"`
}

// +kubebuilder:object:root=true

// CertificateRequest represents a CertificateRequest
type CertificateRequest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// Specification of the desired state of the CertificateRequest resource.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec CertificateRequestSpec `json:"spec,omitempty"`
	// Status of the CertificateRequest.
	// This is set and managed automatically.
	// Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status CertificateRequestStatus `json:"status,omitempty"`
}

// CertificateRequestSpec represents a CertificateRequest.spec
type CertificateRequestSpec struct {
	// Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
	// issuer may choose to ignore the requested duration, just like any other
	// requested attribute.
	Duration string `json:"duration,omitempty"`
	// Extra contains extra attributes of the user that created the CertificateRequest.
	// Populated by the cert-manager webhook on creation and immutable.
	Extra map[string][]string `json:"extra,omitempty"`
	// Groups contains group membership of the user that created the CertificateRequest.
	// Populated by the cert-manager webhook on creation and immutable.
	Groups []string `json:"groups,omitempty"`
	// Requested basic constraints isCA value. Note that the issuer may choose
	// to ignore the requested isCA value, just like any other requested attribute.
	// 
	// NOTE: If the CSR in the `Request` field has a BasicConstraints extension,
	// it must have the same isCA value as specified here.
	// 
	// If true, this will automatically add the `cert sign` usage to the list
	// of requested `usages`.
	Isca bool `json:"isCA,omitempty"`
	// Reference to the issuer responsible for issuing the certificate.
	// If the issuer is namespace-scoped, it must be in the same namespace
	// as the Certificate. If the issuer is cluster-scoped, it can be used
	// from any namespace.
	// 
	// The `name` field of the reference must always be specified.
	Issuerref CertificateRequestSpecIssuerref `json:"issuerRef,omitempty"`
	// The PEM-encoded X.509 certificate signing request to be submitted to the
	// issuer for signing.
	// 
	// If the CSR has a BasicConstraints extension, its isCA attribute must
	// match the `isCA` value of this CertificateRequest.
	// If the CSR has a KeyUsage extension, its key usages must match the
	// key usages in the `usages` field of this CertificateRequest.
	// If the CSR has a ExtKeyUsage extension, its extended key usages
	// must match the extended key usages in the `usages` field of this
	// CertificateRequest.
	Request []byte `json:"request,omitempty"`
	// UID contains the uid of the user that created the CertificateRequest.
	// Populated by the cert-manager webhook on creation and immutable.
	Uid string `json:"uid,omitempty"`
	// Requested key usages and extended key usages.
	// 
	// NOTE: If the CSR in the `Request` field has uses the KeyUsage or
	// ExtKeyUsage extension, these extensions must have the same values
	// as specified here without any additional values.
	// 
	// If unset, defaults to `digital signature` and `key encipherment`.
	Usages []CertificateRequestSpecUsages `json:"usages,omitempty"`
	// Username contains the name of the user that created the CertificateRequest.
	// Populated by the cert-manager webhook on creation and immutable.
	Username string `json:"username,omitempty"`
}

// CertificateRequestSpecUsages represents an enumeration for Usages
type CertificateRequestSpecUsages string

var (
	// CertificateRequestSpecUsagesSigning Usages enum value "signing"
	CertificateRequestSpecUsagesSigning CertificateRequestSpecUsages = "signing"
	// CertificateRequestSpecUsagesDigitalSignature Usages enum value "digital signature"
	CertificateRequestSpecUsagesDigitalSignature CertificateRequestSpecUsages = "digital signature"
	// CertificateRequestSpecUsagesContentCommitment Usages enum value "content commitment"
	CertificateRequestSpecUsagesContentCommitment CertificateRequestSpecUsages = "content commitment"
	// CertificateRequestSpecUsagesKeyEncipherment Usages enum value "key encipherment"
	CertificateRequestSpecUsagesKeyEncipherment CertificateRequestSpecUsages = "key encipherment"
	// CertificateRequestSpecUsagesKeyAgreement Usages enum value "key agreement"
	CertificateRequestSpecUsagesKeyAgreement CertificateRequestSpecUsages = "key agreement"
	// CertificateRequestSpecUsagesDataEncipherment Usages enum value "data encipherment"
	CertificateRequestSpecUsagesDataEncipherment CertificateRequestSpecUsages = "data encipherment"
	// CertificateRequestSpecUsagesCertSign Usages enum value "cert sign"
	CertificateRequestSpecUsagesCertSign CertificateRequestSpecUsages = "cert sign"
	// CertificateRequestSpecUsagesCrlSign Usages enum value "crl sign"
	CertificateRequestSpecUsagesCrlSign CertificateRequestSpecUsages = "crl sign"
	// CertificateRequestSpecUsagesEncipherOnly Usages enum value "encipher only"
	CertificateRequestSpecUsagesEncipherOnly CertificateRequestSpecUsages = "encipher only"
	// CertificateRequestSpecUsagesDecipherOnly Usages enum value "decipher only"
	CertificateRequestSpecUsagesDecipherOnly CertificateRequestSpecUsages = "decipher only"
	// CertificateRequestSpecUsagesAny Usages enum value "any"
	CertificateRequestSpecUsagesAny CertificateRequestSpecUsages = "any"
	// CertificateRequestSpecUsagesServerAuth Usages enum value "server auth"
	CertificateRequestSpecUsagesServerAuth CertificateRequestSpecUsages = "server auth"
	// CertificateRequestSpecUsagesClientAuth Usages enum value "client auth"
	CertificateRequestSpecUsagesClientAuth CertificateRequestSpecUsages = "client auth"
	// CertificateRequestSpecUsagesCodeSigning Usages enum value "code signing"
	CertificateRequestSpecUsagesCodeSigning CertificateRequestSpecUsages = "code signing"
	// CertificateRequestSpecUsagesEmailProtection Usages enum value "email protection"
	CertificateRequestSpecUsagesEmailProtection CertificateRequestSpecUsages = "email protection"
	// CertificateRequestSpecUsagesSMime Usages enum value "s/mime"
	CertificateRequestSpecUsagesSMime CertificateRequestSpecUsages = "s/mime"
	// CertificateRequestSpecUsagesIpsecEndSystem Usages enum value "ipsec end system"
	CertificateRequestSpecUsagesIpsecEndSystem CertificateRequestSpecUsages = "ipsec end system"
	// CertificateRequestSpecUsagesIpsecTunnel Usages enum value "ipsec tunnel"
	CertificateRequestSpecUsagesIpsecTunnel CertificateRequestSpecUsages = "ipsec tunnel"
	// CertificateRequestSpecUsagesIpsecUser Usages enum value "ipsec user"
	CertificateRequestSpecUsagesIpsecUser CertificateRequestSpecUsages = "ipsec user"
	// CertificateRequestSpecUsagesTimestamping Usages enum value "timestamping"
	CertificateRequestSpecUsagesTimestamping CertificateRequestSpecUsages = "timestamping"
	// CertificateRequestSpecUsagesOcspSigning Usages enum value "ocsp signing"
	CertificateRequestSpecUsagesOcspSigning CertificateRequestSpecUsages = "ocsp signing"
	// CertificateRequestSpecUsagesMicrosoftSgc Usages enum value "microsoft sgc"
	CertificateRequestSpecUsagesMicrosoftSgc CertificateRequestSpecUsages = "microsoft sgc"
	// CertificateRequestSpecUsagesNetscapeSgc Usages enum value "netscape sgc"
	CertificateRequestSpecUsagesNetscapeSgc CertificateRequestSpecUsages = "netscape sgc"
)

// CertificateRequestSpecIssuerref represents a CertificateRequest.spec.issuerRef
type CertificateRequestSpecIssuerref struct {
	// Group of the resource being referred to.
	Group string `json:"group,omitempty"`
	// Kind of the resource being referred to.
	Kind string `json:"kind,omitempty"`
	// Name of the resource being referred to.
	Name string `json:"name,omitempty"`
}

// CertificateRequestStatus represents a CertificateRequest.status
type CertificateRequestStatus struct {
	// The PEM encoded X.509 certificate of the signer, also known as the CA
	// (Certificate Authority).
	// This is set on a best-effort basis by different issuers.
	// If not set, the CA is assumed to be unknown/not available.
	Ca []byte `json:"ca,omitempty"`
	// The PEM encoded X.509 certificate resulting from the certificate
	// signing request.
	// If not set, the CertificateRequest has either not been completed or has
	// failed. More information on failure can be found by checking the
	// `conditions` field.
	Certificate []byte `json:"certificate,omitempty"`
	// List of status conditions to indicate the status of a CertificateRequest.
	// Known condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.
	Conditions []CertificateRequestStatusConditions `json:"conditions,omitempty"`
	// FailureTime stores the time that this CertificateRequest failed. This is
	// used to influence garbage collection and back-off.
	Failuretime metav1.Time `json:"failureTime,omitempty"`
}

// CertificateRequestStatusConditions represents a CertificateRequest.status.conditions
type CertificateRequestStatusConditions struct {
	// LastTransitionTime is the timestamp corresponding to the last status
	// change of this condition.
	Lasttransitiontime metav1.Time `json:"lastTransitionTime,omitempty"`
	// Message is a human readable description of the details of the last
	// transition, complementing reason.
	Message string `json:"message,omitempty"`
	// Reason is a brief machine readable explanation for the condition's last
	// transition.
	Reason string `json:"reason,omitempty"`
	// Status of the condition, one of (`True`, `False`, `Unknown`).
	Status CertificateRequestStatusConditionsStatus `json:"status,omitempty"`
	// Type of the condition, known values are (`Ready`, `InvalidRequest`,
	// `Approved`, `Denied`).
	Type string `json:"type,omitempty"`
}

// CertificateRequestStatusConditionsStatus represents an enumeration for Status
type CertificateRequestStatusConditionsStatus string

var (
	// CertificateRequestStatusConditionsStatusTrue Status enum value "True"
	CertificateRequestStatusConditionsStatusTrue CertificateRequestStatusConditionsStatus = "True"
	// CertificateRequestStatusConditionsStatusFalse Status enum value "False"
	CertificateRequestStatusConditionsStatusFalse CertificateRequestStatusConditionsStatus = "False"
	// CertificateRequestStatusConditionsStatusUnknown Status enum value "Unknown"
	CertificateRequestStatusConditionsStatusUnknown CertificateRequestStatusConditionsStatus = "Unknown"
)

