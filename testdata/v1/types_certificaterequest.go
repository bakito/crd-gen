// Code generated by opanapi-generator. DO NOT EDIT.

package v1

import (
    metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Generated from Certificate.cert-manager.io/v1 CRD

// +kubebuilder:object:root=true

// CertificateRequestList is a list of Certificaterequests.
type CertificateRequestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items []CertificateRequest `json:"items"`
}

// +kubebuilder:object:root=true

// CertificateRequest represents a CertificateRequest
type CertificateRequest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// Specification of the desired state of the CertificateRequest resource.
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec CertificateRequestSpec `json:"spec,omitempty"`
	// Status of the CertificateRequest.
	// This is set and managed automatically.
	// Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status CertificateRequestStatus `json:"status,omitempty"`
}


// CertificateRequestConditions represents a CertificateRequest.status.conditions
type CertificateRequestConditions struct {
	// LastTransitionTime is the timestamp corresponding to the last status
	// change of this condition.
	LastTransitionTime metav1.Time `json:"lastTransitionTime,omitempty"`
	// Message is a human readable description of the details of the last
	// transition, complementing reason.
	Message string `json:"message,omitempty"`
	// Reason is a brief machine readable explanation for the condition's last
	// transition.
	Reason string `json:"reason,omitempty"`
	// Status of the condition, one of (`True`, `False`, `Unknown`).
	Status CertificateRequestStatus1 `json:"status,omitempty"`
	// Type of the condition, known values are (`Ready`, `InvalidRequest`,
	// `Approved`, `Denied`).
	Type string `json:"type,omitempty"`
}

// CertificateRequestIssuerRef represents a CertificateRequest.spec.issuerRef
type CertificateRequestIssuerRef struct {
	// Group of the resource being referred to.
	Group string `json:"group,omitempty"`
	// Kind of the resource being referred to.
	Kind string `json:"kind,omitempty"`
	// Name of the resource being referred to.
	Name string `json:"name,omitempty"`
}

// CertificateRequestSpec represents a CertificateRequest.spec
type CertificateRequestSpec struct {
	// Requested 'duration' (i.e. lifetime) of the Certificate. Note that the
	// issuer may choose to ignore the requested duration, just like any other
	// requested attribute.
	Duration string `json:"duration,omitempty"`
	// Extra contains extra attributes of the user that created the CertificateRequest.
	// Populated by the cert-manager webhook on creation and immutable.
	Extra map[string][]string `json:"extra,omitempty"`
	// Groups contains group membership of the user that created the CertificateRequest.
	// Populated by the cert-manager webhook on creation and immutable.
	Groups []string `json:"groups,omitempty"`
	// Requested basic constraints isCA value. Note that the issuer may choose
	// to ignore the requested isCA value, just like any other requested attribute.
	// 
	// NOTE: If the CSR in the `Request` field has a BasicConstraints extension,
	// it must have the same isCA value as specified here.
	// 
	// If true, this will automatically add the `cert sign` usage to the list
	// of requested `usages`.
	IsCA bool `json:"isCA,omitempty"`
	// Reference to the issuer responsible for issuing the certificate.
	// If the issuer is namespace-scoped, it must be in the same namespace
	// as the Certificate. If the issuer is cluster-scoped, it can be used
	// from any namespace.
	// 
	// The `name` field of the reference must always be specified.
	IssuerRef CertificateRequestIssuerRef `json:"issuerRef,omitempty"`
	// The PEM-encoded X.509 certificate signing request to be submitted to the
	// issuer for signing.
	// 
	// If the CSR has a BasicConstraints extension, its isCA attribute must
	// match the `isCA` value of this CertificateRequest.
	// If the CSR has a KeyUsage extension, its key usages must match the
	// key usages in the `usages` field of this CertificateRequest.
	// If the CSR has a ExtKeyUsage extension, its extended key usages
	// must match the extended key usages in the `usages` field of this
	// CertificateRequest.
	Request []byte `json:"request,omitempty"`
	// UID contains the uid of the user that created the CertificateRequest.
	// Populated by the cert-manager webhook on creation and immutable.
	Uid string `json:"uid,omitempty"`
	// Requested key usages and extended key usages.
	// 
	// NOTE: If the CSR in the `Request` field has uses the KeyUsage or
	// ExtKeyUsage extension, these extensions must have the same values
	// as specified here without any additional values.
	// 
	// If unset, defaults to `digital signature` and `key encipherment`.
	Usages []CertificateRequestUsages `json:"usages,omitempty"`
	// Username contains the name of the user that created the CertificateRequest.
	// Populated by the cert-manager webhook on creation and immutable.
	Username string `json:"username,omitempty"`
}

// CertificateRequestStatus represents a CertificateRequest.status
type CertificateRequestStatus struct {
	// The PEM encoded X.509 certificate of the signer, also known as the CA
	// (Certificate Authority).
	// This is set on a best-effort basis by different issuers.
	// If not set, the CA is assumed to be unknown/not available.
	Ca []byte `json:"ca,omitempty"`
	// The PEM encoded X.509 certificate resulting from the certificate
	// signing request.
	// If not set, the CertificateRequest has either not been completed or has
	// failed. More information on failure can be found by checking the
	// `conditions` field.
	Certificate []byte `json:"certificate,omitempty"`
	// List of status conditions to indicate the status of a CertificateRequest.
	// Known condition types are `Ready`, `InvalidRequest`, `Approved` and `Denied`.
	Conditions []CertificateRequestConditions `json:"conditions,omitempty"`
	// FailureTime stores the time that this CertificateRequest failed. This is
	// used to influence garbage collection and back-off.
	FailureTime metav1.Time `json:"failureTime,omitempty"`
}

// CertificateRequestStatus1 represents an enumeration for Status
type CertificateRequestStatus1 string

var (
	// CertificateRequestStatus1True Status enum value "True"
	CertificateRequestStatus1True CertificateRequestStatus1 = "True"
	// CertificateRequestStatus1False Status enum value "False"
	CertificateRequestStatus1False CertificateRequestStatus1 = "False"
	// CertificateRequestStatus1Unknown Status enum value "Unknown"
	CertificateRequestStatus1Unknown CertificateRequestStatus1 = "Unknown"
)

// CertificateRequestUsages represents an enumeration for Usages
type CertificateRequestUsages string

var (
	// CertificateRequestUsagesSigning Usages enum value "signing"
	CertificateRequestUsagesSigning CertificateRequestUsages = "signing"
	// CertificateRequestUsagesDigitalSignature Usages enum value "digital signature"
	CertificateRequestUsagesDigitalSignature CertificateRequestUsages = "digital signature"
	// CertificateRequestUsagesContentCommitment Usages enum value "content commitment"
	CertificateRequestUsagesContentCommitment CertificateRequestUsages = "content commitment"
	// CertificateRequestUsagesKeyEncipherment Usages enum value "key encipherment"
	CertificateRequestUsagesKeyEncipherment CertificateRequestUsages = "key encipherment"
	// CertificateRequestUsagesKeyAgreement Usages enum value "key agreement"
	CertificateRequestUsagesKeyAgreement CertificateRequestUsages = "key agreement"
	// CertificateRequestUsagesDataEncipherment Usages enum value "data encipherment"
	CertificateRequestUsagesDataEncipherment CertificateRequestUsages = "data encipherment"
	// CertificateRequestUsagesCertSign Usages enum value "cert sign"
	CertificateRequestUsagesCertSign CertificateRequestUsages = "cert sign"
	// CertificateRequestUsagesCrlSign Usages enum value "crl sign"
	CertificateRequestUsagesCrlSign CertificateRequestUsages = "crl sign"
	// CertificateRequestUsagesEncipherOnly Usages enum value "encipher only"
	CertificateRequestUsagesEncipherOnly CertificateRequestUsages = "encipher only"
	// CertificateRequestUsagesDecipherOnly Usages enum value "decipher only"
	CertificateRequestUsagesDecipherOnly CertificateRequestUsages = "decipher only"
	// CertificateRequestUsagesAny Usages enum value "any"
	CertificateRequestUsagesAny CertificateRequestUsages = "any"
	// CertificateRequestUsagesServerAuth Usages enum value "server auth"
	CertificateRequestUsagesServerAuth CertificateRequestUsages = "server auth"
	// CertificateRequestUsagesClientAuth Usages enum value "client auth"
	CertificateRequestUsagesClientAuth CertificateRequestUsages = "client auth"
	// CertificateRequestUsagesCodeSigning Usages enum value "code signing"
	CertificateRequestUsagesCodeSigning CertificateRequestUsages = "code signing"
	// CertificateRequestUsagesEmailProtection Usages enum value "email protection"
	CertificateRequestUsagesEmailProtection CertificateRequestUsages = "email protection"
	// CertificateRequestUsagesSMime Usages enum value "s/mime"
	CertificateRequestUsagesSMime CertificateRequestUsages = "s/mime"
	// CertificateRequestUsagesIpsecEndSystem Usages enum value "ipsec end system"
	CertificateRequestUsagesIpsecEndSystem CertificateRequestUsages = "ipsec end system"
	// CertificateRequestUsagesIpsecTunnel Usages enum value "ipsec tunnel"
	CertificateRequestUsagesIpsecTunnel CertificateRequestUsages = "ipsec tunnel"
	// CertificateRequestUsagesIpsecUser Usages enum value "ipsec user"
	CertificateRequestUsagesIpsecUser CertificateRequestUsages = "ipsec user"
	// CertificateRequestUsagesTimestamping Usages enum value "timestamping"
	CertificateRequestUsagesTimestamping CertificateRequestUsages = "timestamping"
	// CertificateRequestUsagesOcspSigning Usages enum value "ocsp signing"
	CertificateRequestUsagesOcspSigning CertificateRequestUsages = "ocsp signing"
	// CertificateRequestUsagesMicrosoftSgc Usages enum value "microsoft sgc"
	CertificateRequestUsagesMicrosoftSgc CertificateRequestUsages = "microsoft sgc"
	// CertificateRequestUsagesNetscapeSgc Usages enum value "netscape sgc"
	CertificateRequestUsagesNetscapeSgc CertificateRequestUsages = "netscape sgc"
)

